import os
import json
import requests
import gspread
from google.oauth2.service_account import Credentials
from fuzzywuzzy import process

# Lendo as credenciais do secret do GitHub Actions
credentials_json = os.environ.get("GOOGLE_CREDENTIALS")

# Verificação básica se as credenciais foram carregadas
if not credentials_json:
    print("Erro: Credenciais do Google não encontradas no ambiente.")
    exit(1)

# Convertendo o JSON das credenciais para um dicionário
try:
    credentials_info = json.loads(credentials_json)
    print("Credenciais carregadas com sucesso.")
except json.JSONDecodeError as e:
    print("Erro ao decodificar JSON das credenciais:", e)
    exit(1)

# Configurando as credenciais usando o dicionário
scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
credenciais = Credentials.from_service_account_info(credentials_info, scopes=scopes)

# Autenticando no Google Sheets
try:
    client = gspread.authorize(credenciais)
    print("Autenticado no Google Sheets com sucesso.")
except Exception as e:
    print("Erro ao autenticar no Google Sheets:", e)
    exit(1)

# Acessar a planilha do Google Sheets (ID da sua planilha)
planilha_id = '1-_lGGdU1gH_IkehJrUPydfQ_KxW3J_R9rAS-5dLyGFA'
try:
    spreadsheet = client.open_by_key(planilha_id)
    worksheet = spreadsheet.sheet1
    print("Planilha acessada com sucesso.")
except Exception as e:
    print("Erro ao acessar a planilha:", e)
    exit(1)

# Função para atualizar a planilha com os dados
def atualizar_planilha_google_sheets(pedidos, clientes, worksheet):
    lista_pedidos = []
    ids_adicionados = set()
    
    for pedido in pedidos:
        nome_cliente_pedido = pedido.get('to', {}).get('name', 'N/A')
        nome_correspondente = encontrar_nome_semelhante(nome_cliente_pedido, clientes)
        id_cliente = clientes.get(nome_correspondente, '') if nome_correspondente else 'CLIENT ID NOT FOUND'
        id_pedido = pedido.get('id', 'N/A')
        numero_rastreio = pedido.get('tracking', {}).get('code', 'NOT FOUND')

        if id_pedido not in ids_adicionados:
            lista_pedidos.append([
                id_cliente,
                nome_correspondente or nome_cliente_pedido,
                id_pedido,
                pedido.get('status', 'N/A'),
                pedido.get('service', {}).get('company', {}).get('name', 'N/A'),
                pedido.get('updated_at', 'N/A'),
                pedido.get('to', {}).get('phone', 'N/A'),
                numero_rastreio
            ])
            ids_adicionados.add(id_pedido)

    print(f"Total de pedidos a serem atualizados: {len(lista_pedidos)}")
    try:
        worksheet.clear()  
        worksheet.append_row(["ID do Cliente", "Nome do Cliente", "ID do Pedido", "Status do Pedido", "Transportadora", "Data de Atualização", "Telefone do Cliente", "Número de Rastreio"])
        worksheet.append_rows(lista_pedidos, value_input_option='USER_ENTERED')
        print("Planilha atualizada com sucesso!")
    except Exception as e:
        print("Erro ao atualizar a planilha:", e)

# Executando as funções para obter dados e atualizar a planilha
try:
    clientes = obter_nomes_ids_clientes()
    print(f"Clientes obtidos: {len(clientes)}")  # Debug: Ver quantos clientes foram obtidos
    pedidos = obter_todos_pedidos()
    print(f"Pedidos obtidos: {len(pedidos)}")  # Debug: Ver quantos pedidos foram obtidos

    if pedidos and clientes:
        atualizar_planilha_google_sheets(pedidos, clientes, worksheet)
    else:
        print("Nenhum pedido ou cliente encontrado para salvar.")
except Exception as e:
    print("Erro durante a execução do script:", e)
